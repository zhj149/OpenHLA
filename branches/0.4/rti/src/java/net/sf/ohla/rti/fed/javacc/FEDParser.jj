/**
 * Copyright 2005 Michael Newcomb
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options
{
  /* JavaCC options */
  LOOKAHEAD=1;
  CHOICE_AMBIGUITY_CHECK=5;
  DEBUG_TOKEN_MANAGER=false;
  DEBUG_LOOKAHEAD=false;
  STATIC=false;
}

PARSER_BEGIN(FEDParser)
/**
 * Copyright 2005 Michael Newcomb
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.sf.ohla.rti.fed.javacc;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;

import java.net.URL;

import java.util.concurrent.atomic.AtomicInteger;

import net.sf.ohla.rti.fed.FEDAttribute;
import net.sf.ohla.rti.fed.FEDFDD;
import net.sf.ohla.rti.fed.FEDInteractionClass;
import net.sf.ohla.rti.fed.FEDObjectClass;
import net.sf.ohla.rti.fed.RoutingSpace;

import net.sf.ohla.rti1516.fdd.Attribute;
import net.sf.ohla.rti1516.fdd.Dimension;
import net.sf.ohla.rti1516.fdd.FDD;
import net.sf.ohla.rti1516.fdd.InteractionClass;
import net.sf.ohla.rti1516.fdd.ObjectClass;
import net.sf.ohla.rti1516.fdd.Parameter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import hla.rti.CouldNotOpenFED;
import hla.rti.ErrorReadingFED;
import hla.rti.NameNotFound;

import hla.rti1516.ErrorReadingFDD;

public class FEDParser
{
  private static Logger log = LoggerFactory.getLogger(FEDParser.class);

  protected FEDFDD fedFDD = new FEDFDD();

  public FEDParser(URL url)
    throws CouldNotOpenFED, ErrorReadingFED
  {
    this(new ByteArrayInputStream(new byte[0]));

    if (url == null)
    {
      throw new CouldNotOpenFED("null");
    }

    try
    {
      ReInit(url.openStream(), "UTF-8");
      parse();
    }
    catch (IOException ioe)
    {
      throw new CouldNotOpenFED(url.toString(), ioe);
    }
    catch (ParseException pe)
    {
      throw new ErrorReadingFED(url.toString(), pe);
    }
  }

  public FDD getFDD()
  {
    return fedFDD;
  }
}
PARSER_END(FEDParser)

SKIP :
{
  " "
  | "\t"
  | "\r"
  | "\f"
  | "\n"
}

TOKEN :
{
  < RPAREN: ")" >
  | < INTEGER_LITERAL: (<DecimalDigit>)+ >
  | < VERSION: "v" <INTEGER_LITERAL> ("." <INTEGER_LITERAL>)* >
}

TOKEN : /* Reserved Words preceded by '(' */
{
  < FED:            "(FED" >
  | < FEDERATION:   "(Federation" >
  | < FEDVERSION:   "(FEDversion" >
  | < SPACES:       "(spaces" >
  | < SPACE:        "(space" >
  | < DIMENSION:    "(dimension" >
  | < OBJECTS:      "(objects" >
  | < CLASS:        "(class" >
  | < ATTRIBUTE:    "(attribute" >
  | < INTERACTIONS: "(interactions" >
  | < PARAMETER:    "(parameter" >
}

void parse()
  throws ErrorReadingFED : {}
{
  <FED>
  Federation()
  FEDversion()
  Spaces()
  ObjectClasses()
  InteractionClasses()
  <RPAREN> <EOF>
}

void Federation() : {}
{
  <FEDERATION> FEDname() <RPAREN>
}

void FEDname() :
{
  String fedName;
}
{
  fedName=NameString()
  {
    fedFDD.setFEDName(fedName);
  }
}

void FEDversion() : {}
{
  <FEDVERSION> FEDDIFversionNumber() <RPAREN>
}

String FEDDIFversionNumber() :
{
  Token t;
}
{
  t=<VERSION>
  {
    fedFDD.setFEDDIFVersionNumber(t.image);
    return t.image;
  }
}

void Spaces()
  throws ErrorReadingFED :
{
  AtomicInteger routingSpaceCount = new AtomicInteger();
  RoutingSpace routingSpace;
}
{
  <SPACES>
  ( routingSpace=Space(routingSpaceCount)
    { fedFDD.add(routingSpace); }
  )*
  <RPAREN>
}

RoutingSpace Space(AtomicInteger routingSpaceCount)
  throws ErrorReadingFED :
{
  RoutingSpace routingSpace;
  String routingSpaceName;
  String dimensionName;
}
{
  <SPACE>
  routingSpaceName=SpaceName()
  {
    if (routingSpaceName.startsWith("HLA"))
    {
      throw new ErrorReadingFED(String.format(
        "routing space begins with 'HLA': ", routingSpaceName));
    }

    routingSpace = new RoutingSpace(routingSpaceName, routingSpaceCount);
  }
  ( dimensionName=Dimension()
    {
      Dimension dimension =
        new Dimension(String.format("%s.%s", routingSpaceName, dimensionName));
      fedFDD.add(dimension);
      routingSpace.add(dimensionName, dimension);
    }
  )*
  <RPAREN>

  { return routingSpace; }
}

String SpaceName() :
{
  String spaceName;
}
{
  spaceName=NameString() { return spaceName; }
}

String Dimension() :
{
  String dimensionName;
}
{
  <DIMENSION> dimensionName=DimensionName() <RPAREN>
  {
    return dimensionName;
  }
}

String DimensionName() :
{
  String dimensionName;
}
{
  dimensionName=NameString() { return dimensionName; }
}

void ObjectClasses()
  throws ErrorReadingFED :
{
  FEDObjectClass objectRoot;
}
{
  <OBJECTS>
    objectRoot=ObjectRoot()
    { fedFDD.add(objectRoot); }
  <RPAREN>
}

FEDObjectClass ObjectRoot()
  throws ErrorReadingFED :
{
  AtomicInteger objectClassCount = new AtomicInteger();
  AtomicInteger attributeCount = new AtomicInteger();

  FEDObjectClass objectRoot;
  String objectClassName;

  FEDAttribute attribute;
  FEDObjectClass subObject;
}
{
  <CLASS> objectClassName=ObjectClassName()
  {
    if (!FEDObjectClass.OBJECT_ROOT.equals(objectClassName))
    {
      throw new ErrorReadingFED(String.format(
        "invalid root object: %s (must be %s)", objectClassName,
        FEDObjectClass.OBJECT_ROOT));
    }

    objectRoot = new FEDObjectClass(
      ObjectClass.HLA_OBJECT_ROOT, objectClassCount);
  }

  attribute=PriviledgeToDeleteAttribute(attributeCount)
  {
    objectRoot.add(attribute);
  }

  ( subObject=ObjectClass(objectRoot, objectClassCount, attributeCount)
    { objectRoot.add(subObject); }
  )*
  <RPAREN>

  { return objectRoot; }
}

FEDAttribute PriviledgeToDeleteAttribute(AtomicInteger attributeCount)
  throws ErrorReadingFED :
{
  String attributeName;
  String transport;
  String order;
  String spaceName = null;
}
{
  <ATTRIBUTE> attributeName=AttributeName() transport=Transport()
  order=Order() [ spaceName=SpaceName() ] <RPAREN>

  {
    if (!FEDAttribute.PRIVILEGE_TO_DELETE.equals(attributeName))
    {
      throw new ErrorReadingFED(String.format(
        "invalid attribute: %s (must be %s)", attributeName,
        FEDAttribute.PRIVILEGE_TO_DELETE));
    }

    FEDAttribute attribute = new FEDAttribute(
      Attribute.HLA_PRIVILEGE_TO_DELETE_OBJECT, attributeCount);
    try
    {
      attribute.setOrder(order);
      attribute.setTransportation(transport);

      if (spaceName != null)
      {
        attribute.setRoutingSpace(fedFDD.getRoutingSpace(spaceName));
      }
    }
    catch (ErrorReadingFDD erfdd)
    {
      throw new ErrorReadingFED(erfdd);
    }
    catch (NameNotFound nnf)
    {
      throw new ErrorReadingFED(nnf);
    }

    return attribute;
  }
}

FEDObjectClass ObjectClass(FEDObjectClass parent,
                           AtomicInteger objectClassCount,
                           AtomicInteger attributeCount)
  throws ErrorReadingFED :
{
  FEDObjectClass objectClass;
  String objectClassName;

  FEDAttribute attribute;
  FEDObjectClass subObject;
}
{
  <CLASS> objectClassName=ObjectClassName()
  {
    objectClass = new FEDObjectClass(objectClassName, parent, objectClassCount);
  }
  ( attribute=Attribute(attributeCount)
    { objectClass.add(attribute); }
  )*
  ( subObject=ObjectClass(objectClass, objectClassCount, attributeCount)
    { objectClass.add(subObject); }
  )*
  <RPAREN>

  { return objectClass; }
}

FEDAttribute Attribute(AtomicInteger attributeCount)
  throws ErrorReadingFED :
{
  String attributeName;
  String transport;
  String order;
  String spaceName = null;
}
{
  <ATTRIBUTE> attributeName=AttributeName() transport=Transport()
  order=Order() [ spaceName=SpaceName() ] <RPAREN>

  {
    FEDAttribute attribute = new FEDAttribute(attributeName, attributeCount);
    try
    {
      attribute.setOrder(order);
      attribute.setTransportation(transport);

      if (spaceName != null)
      {
        attribute.setRoutingSpace(fedFDD.getRoutingSpace(spaceName));
      }
    }
    catch (ErrorReadingFDD erfdd)
    {
      throw new ErrorReadingFED(erfdd);
    }
    catch (NameNotFound nnf)
    {
      throw new ErrorReadingFED(nnf);
    }

    return attribute;
  }
}

void InteractionClasses()
  throws ErrorReadingFED :
{
  FEDInteractionClass interactionClass;
}
{
  <INTERACTIONS>
    interactionClass=InteractionRoot()
    { fedFDD.add(interactionClass); }
  <RPAREN>
}

FEDInteractionClass InteractionRoot()
  throws ErrorReadingFED :
{
  AtomicInteger interactionClassCount = new AtomicInteger();
  AtomicInteger parameterCount = new AtomicInteger();

  FEDInteractionClass interactionRoot;
  String interactionClassName;
  String transport;
  String order;
  String spaceName = null;

  FEDInteractionClass rtiPrivateInteraction;
  FEDInteractionClass subInteraction;
}
{
  <CLASS> interactionClassName=InteractionClassName() transport=Transport()
  order=Order() [ spaceName=SpaceName() ]

  {
    if (!FEDInteractionClass.INTERACTION_ROOT.equals(interactionClassName))
    {
      throw new ErrorReadingFED(String.format(
        "invalid root interaction: %s (must be %s)", interactionClassName,
        FEDInteractionClass.INTERACTION_ROOT));
    }

    interactionRoot = new FEDInteractionClass(
      InteractionClass.HLA_INTERACTION_ROOT, interactionClassCount);

    try
    {
      interactionRoot.setOrder(order);
      interactionRoot.setTransportation(transport);

      if (spaceName != null)
      {
        interactionRoot.setRoutingSpace(fedFDD.getRoutingSpace(spaceName));
      }
    }
    catch (ErrorReadingFDD erfdd)
    {
      throw new ErrorReadingFED(erfdd);
    }
    catch (NameNotFound nnf)
    {
      throw new ErrorReadingFED(nnf);
    }
  }

  rtiPrivateInteraction=RTIprivateInteraction(
    interactionRoot, interactionClassCount, parameterCount)
  { interactionRoot.add(rtiPrivateInteraction); }

  ( subInteraction=InteractionClass(interactionRoot, interactionClassCount,
                                    parameterCount)
    { interactionRoot.add(subInteraction); }
  )*
  <RPAREN>

  { return interactionRoot; }
}

FEDInteractionClass RTIprivateInteraction(FEDInteractionClass parent,
                                          AtomicInteger interactionClassCount,
                                          AtomicInteger parameterCount)
  throws ErrorReadingFED :
{
  FEDInteractionClass rtiPrivateInteraction;
  String interactionClassName;
  String transport;
  String order;
  String spaceName = null;
}
{
  <CLASS> interactionClassName=InteractionClassName() transport=Transport()
  order=Order() [ spaceName=SpaceName() ]

  {
    rtiPrivateInteraction = new FEDInteractionClass(
      interactionClassName, parent, interactionClassCount);

    try
    {
      rtiPrivateInteraction.setOrder(order);
      rtiPrivateInteraction.setTransportation(transport);

      if (spaceName != null)
      {
        rtiPrivateInteraction.setRoutingSpace(
          fedFDD.getRoutingSpace(spaceName));
      }
    }
    catch (ErrorReadingFDD erfdd)
    {
      throw new ErrorReadingFED(erfdd);
    }
    catch (NameNotFound nnf)
    {
      throw new ErrorReadingFED(nnf);
    }
  }

  <RPAREN>

  { return rtiPrivateInteraction; }
}

FEDInteractionClass InteractionClass(FEDInteractionClass parent,
                                     AtomicInteger interactionClassCount,
                                     AtomicInteger parameterCount)
  throws ErrorReadingFED :
{
  FEDInteractionClass interactionClass;
  String interactionClassName;
  String transport;
  String order;
  String spaceName = null;

  Parameter parameter;
  FEDInteractionClass subInteraction;
}
{
  <CLASS> interactionClassName=InteractionClassName() transport=Transport()
  order=Order() [ spaceName=SpaceName() ]

  {
    interactionClass = new FEDInteractionClass(interactionClassName, parent,
                                               interactionClassCount);

    try
    {
      interactionClass.setOrder(order);
      interactionClass.setTransportation(transport);

      if (spaceName != null)
      {
        interactionClass.setRoutingSpace(fedFDD.getRoutingSpace(spaceName));
      }
    }
    catch (ErrorReadingFDD erfdd)
    {
      throw new ErrorReadingFED(erfdd);
    }
    catch (NameNotFound nnf)
    {
      throw new ErrorReadingFED(nnf);
    }
  }

  ( parameter=Parameter(parameterCount)
    { interactionClass.add(parameter); }
  )*
  ( subInteraction=InteractionClass(interactionClass, interactionClassCount,
                                    parameterCount)
    { interactionClass.add(subInteraction); }
  )*
  <RPAREN>

  { return interactionClass; }
}

Parameter Parameter(AtomicInteger parameterCount)
  throws ErrorReadingFED :
{
  String parameterName;
}
{
  <PARAMETER> parameterName=ParameterName() <RPAREN>
  {
    return new Parameter(parameterName, parameterCount);
  }
}

String ObjectClassName() :
{
  String objectClassName;
}
{
  objectClassName=NameString() { return objectClassName; }
}

String AttributeName() :
{
  String attributeName;
}
{
  attributeName=NameString() { return attributeName; }
}

String InteractionClassName() :
{
  String interactionClassName;
}
{
  interactionClassName=NameString() { return interactionClassName; }
}

String ParameterName() :
{
  String parameterName;
}
{
  parameterName=NameString() { return parameterName; }
}

String Transport() :
{
  String transport;
}
{
  transport=NameString() { return transport; }
}

String Order() :
{
  String order;
}
{
  order=NameString() { return order; }
}

String NameString() :
{
  Token t;
}
{
  t=<NameString> { return t.image; }
}

TOKEN : /* Strings */
{
  /* WARNING: this definition must come AFTER everything! */

  < NameString: <Letter> (<NameCharacter>)* >
  | < #NameCharacter: <Letter> | <DecimalDigit> |
                      "_" | "+" | "-" | "*" | "/" | "@" | "$" | "%" | "^" |
                      "&" | "=" | "<" | ">" | "~" | "!" | "#"
    >
  | < #Letter: ["a"-"z","A"-"Z"] >
  | < #DecimalDigit: ["0"-"9"] >
}
